from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware

import asyncio
from datetime import datetime

from config import *
from weather import *
from db import Postgers
import keyboards as kb


bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

dp.middleware.setup(LoggingMiddleware())

# —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–¥
db = Postgers()


# query —Ö—ç–Ω–¥–ª–µ—Ä—ã
@dp.callback_query_handler(lambda c: c.data == 'sub_yes')
async def user_choose_sub_yes(callback_query: types.CallbackQuery):
	db.set_state(callback_query.from_user.id, 5)
	await bot.answer_callback_query(callback_query.id, text='–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥!')
	await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥üèô –∏ –≤—Ä–µ–º—è‚åö, –∫–æ–≥–¥–∞ –≤–∞–º –±—É–¥—É—Ç\n–ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: "–ú–æ—Å–∫–≤–∞ 15:30"')


@dp.callback_query_handler(lambda c: c.data == 'sub_no')
async def user_choose_sub_no(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id, text='–¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å')
	db.unsubscribe(callback_query.from_user.id)
	await bot.send_message(callback_query.from_user.id, '–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚ùå')


# commands —Ö—ç–Ω–¥–ª–µ—Ä—ã
@dp.message_handler(commands=['start'])
async def process_start_cmd(message: types.Message):
	text = '–ü—Ä–∏–≤–µ—Ç üòÄ. –ß—Ç–æ–±—ã —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É )'
	db.set_state(message.from_user.id, 1)
	await message.reply(text, reply_markup=kb.kb_start)


@dp.message_handler(commands=['restart'])
async def process_restart_cmd(message: types.Message):
	text = '–Ø –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª—Å—è!'
	db.set_state(message.from_user.id, 0)
	await bot.send_message(message.from_user.id, text)


@dp.message_handler(commands=['patch_notes'])
async def show_all_patch_notes(message: types.Message):
	text = ''
	for key in patches:
		text = text + key + ': \n  –î–∞—Ç–∞: ' + str(patches[key]['patch_date']) \
			   + '\n  –ò–∑–º–µ–Ω–µ–Ω–∏—è: ' + str(patches[key]['patch_innovations']) + '\n\n'
	await bot.send_message(message.from_user.id, text)


@dp.message_handler(commands=['patch_actual'])
async def show_actual_patch_notes(message: types.Message):
	text = str(version)
	text = text + ': \n  –î–∞—Ç–∞: ' + str(patches[version]['patch_date']) \
		   + '\n  –ò–∑–º–µ–Ω–µ–Ω–∏—è: ' + str(patches[version]['patch_innovations'])
	await bot.send_message(message.from_user.id, text)


@dp.message_handler(commands=['version'])
async def show_version(message: types.Message):
	text = '–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ : ' + str(version)
	await bot.send_message(message.from_user.id, text)


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(lambda message: db.get_current_state(message.from_user.id) == 1)
async def all_funcs_bot(message: types.Message):
	db.set_state(message.from_user.id, 2)
	await message.reply('–í–æ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞', reply_markup=kb.kb_main)


@dp.message_handler(lambda message: message.text == '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É' and db.get_current_state(message.from_user.id) == 2)
async def watch_weather_now(message: types.Message):
	text = '–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ üèô, –ø–æ–≥–æ–¥—É –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å'
	db.set_state(message.from_user.id, 3)
	await message.reply(text, reply_markup=kb.kb_of_cities)


@dp.message_handler(lambda message: db.get_current_state(message.from_user.id) == 3)
async def user_input_city(message: types.Message):
	# StateDb.set_state(message.from_user.id, 2)
	try:
		if message.text == '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É':
			text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—Éüëá'
			await bot.send_message(message.from_user.id, text)

		elif message.text == '–í—ã–π—Ç–∏':
			db.set_state(message.from_user.id, 2)
			# await bot.send_message(message.from_user.id, text='–í—ã –≤—ã—à–ª–∏ –≤ –º–µ–Ω—é —Å –≥–ª–∞–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏')
			await message.reply(text='–í—ã –≤—ã—à–ª–∏ –≤ –º–µ–Ω—é —Å –≥–ª–∞–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏', reply_markup=kb.kb_main)
		else:
			text = search_weather_data(message.text)
			await bot.send_message(message.from_user.id, text)
	except:
		text = '–í –º–æ–µ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ üòï'
		await bot.send_message(message.from_user.id, text)


@dp.message_handler(lambda message: db.get_current_state(message.from_user.id) == 5)
async def user_input_city_notion(message: types.Message):
	# —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≥–æ—Ä–æ–¥ –ª–∏ —ç—Ç–æ
	# —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
	city = message.text.split(' ')[0]
	time = message.text.split(' ')[1]
	text = '–û—Ç–ª–∏—á–Ω–æ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã'
	db.subscribe(message.from_user.id,time, city)
	db.set_state(message.from_user.id, 2)
	await message.reply(text, reply_markup=kb.kb_main)


@dp.message_handler(lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' and db.get_current_state(message.from_user.id) == 2)
async def sub_on_notion(message: types.Message):
	text = '–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ ü§î?'
	await message.reply(text, reply_markup=kb.kb_sub_yes_or_no)


# —Ç–∞–π–º–µ—Ä
# async def scheduled(wait_for):
# 	while True:
# 		await asyncio.sleep(wait_for)
# 		now_hr = int(str(datetime.today().time()).split(':')[0])
# 		now_mn = int(str(datetime.today().time()).split(':')[1])
#
# 		# –ø–æ–ø—Ä–æ–±—ã–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏—Ç—å –¥–≤–∞ —Ü–∏–∫–ª–∞
# 		for user in db.get_sub_users():
# 			not_time_hr = int(db.get_not_time_list(user[0], True)[0])
# 			not_time_mn = int(db.get_not_time_list(user[0], True)[1])
#
#
# 			if now_hr == not_time_hr and now_mn == not_time_mn:
# 				text = notif_forecast(str(db.get_city(user[0])))
# 				await bot.send_message(user[0], text, disable_notification=True)


if __name__ == '__main__':
	# dp.loop.create_task(scheduled(60))
	executor.start_polling(dp)
