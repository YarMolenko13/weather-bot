from pyowm.owm import OWM
from pyowm.utils.config import get_default_config
from pyowm.utils import timestamps
from datetime import datetime



config = get_default_config()  # —Å–æ–∑–¥–∞–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ , —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
config['language'] = 'ru'  # –∏–∑–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫
owm = OWM('488c435162b187b2632cda6bfe005d78', config)
mgr = owm.weather_manager()




def search_weather_data(city):
	# –≥–æ—Ä–æ–¥ , –æ –∫—Ç–æ—Ä–æ–º –º—ã –ø–æ–ª—É—á–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ
	weather = mgr.weather_at_place(city).weather

	temperature = int(weather.temperature('celsius')['temp'])  # –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è
	if temperature > 25:
		temperature_smile = ' üå°üî•'
	elif temperature >= 20 and int(temperature) <= 25:
		temperature_smile = ' üå°ü§§'
	elif temperature < 20 and int(temperature) >= 10:
		temperature_smile = ' üå°üòê'
	elif temperature < 10 and int(temperature) >= 0:
		temperature_smile = ' üå°‚òπ'
	else:
		temperature_smile = ' üå°‚ùÑ'

	temperature = str(temperature) + '‚ÑÉ' + temperature_smile

	wind_ms = str(int(weather.wind()['speed']))
	if int(wind_ms) > 6:
		wind_smile = 'üå™'
	else:
		wind_smile = ' üí®'

	wind_kmh = weather.wind(unit='km_hour')['speed']
	wind_kmh = str(int(wind_kmh)) + '–∫–º/—á' + wind_smile

	weather_status = weather.detailed_status.capitalize()
	weather_status_smile = ''
	if weather_status == '–ü–∞—Å–º—É—Ä–Ω–æ':
		weather_status_smile = ' üå•'
	if weather_status == '–Ø—Å–Ω–æ':
		weather_status_smile = ' ‚òÄ'
	if weather_status == '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å':
		weather_status_smile = ' üíß'
	if weather_status == '–ù–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å':
		weather_status_smile = ' ‚õÖ'
	if weather_status == '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏':
		weather_status_smile = ' üå§'
	if weather_status == '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å':
		weather_status_smile = ' ‚òÄ‚òÅ'
	if weather_status == '–ú–≥–ª–∞':
		weather_status_smile = ' üå´'
	if weather_status == '–ì—Ä–æ–∑–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–æ–∂–¥—ë–º':
		weather_status_smile = ' ‚õà'
	if weather_status == '–ì—Ä–æ–∑–∞ —Å –¥–æ–∂–¥—ë–º':
		weather_status_smile = ' ‚õà'
	if weather_status == '–ì—Ä–æ–∑–∞':
		weather_status_smile = ' üå©'
	weather_status = weather_status + weather_status_smile

	final_message = ('''–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ {0}:
		–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {1}
		–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ - {2}–º/—Å –∏–ª–∏ –∂–µ {3}
		{4}'''.format(city, temperature, wind_ms, wind_kmh, weather_status))

	return final_message

def notif_forecast(city):
	
	forecaster = mgr.forecast_at_place(city, '3h')
	weather = mgr.weather_at_place(city).weather
	temperature = int(weather.temperature('celsius')['temp'])
	temperature = str(temperature) + '‚ÑÉ'
	is_rain_today = forecaster.will_be_rainy_at(datetime.today())
	is_rain_today_mesasge = '[ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ ]'
	try:
		if is_rain_today:
			is_rain_today_message = '–æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å'
		else:
			is_rain_today_mesasge = '–¥–æ–∂–¥—è –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è'
	except:
		is_rain_today_mesasge = '[ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ ]'
	weather_status = weather.detailed_status
	# is_rain_tomorrow = forecaster.will_be_rainy_at(timestamps.tomorrow)
	final_message = '''–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:
{0}, {1}, {2}'''.format(weather_status, is_rain_today_mesasge, temperature)
	return final_message




# def notif_forecast(city):
# 	try:
# 		forecaster = mgr.forecast_at_place(city, '3h')
# 		weather = mgr.weather_at_place(city).weather

# 		temperature = int(weather.temperature('celsius')['temp'])
# 		temperature = str(temperature) + '‚ÑÉ'
# 		is_rain_today = forecaster.will_be_rainy_at(datetime.today())
# 		is_rain_today_mesasge = '[ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ ]'
# 		try:
# 			if is_rain_today:
# 				is_rain_today_message = '–æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å'
# 			else:
# 				is_rain_today_mesasge = '–¥–æ–∂–¥—è –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è'
# 		except:
# 			is_rain_today_mesasge = '[ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ ]'
# 		weather_status = weather.detailed_status
# 		# is_rain_tomorrow = forecaster.will_be_rainy_at(timestamps.tomorrow)

# 		final_message = '''–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:
# {0}, {1}, {2}'''.format(weather_status, is_rain_today_mesasge, temperature)
# 		return final_message
# 	except:
# 		return '–û—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω—ã –≤—ã –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥,\n–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –º–æ–µ–º –±–¥ ('


# def is_soon_rain(city):
# 	try:
# 		forecast = mgr.forecast_at_place(city, '3h')

# 		hour = timestamps.next_hour()
# 		will_be_rain_next_hour = forecast.will_be_rainy_at(hour)
# 		if will_be_rain_next_hour:
# 			return True
# 	except:
# 		return 'err'